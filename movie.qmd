---
title: "Ha`rvest`ing Rotten Tomatoes"
subtitle: "List of Top 50 Movies of all time as reviewed and selected by Tomatometer-approved critics and Rotten Tomatoes users, along with IMDb (Internet Movie Database) Ratings"
description: Movie related information was scraped from <a href="https://editorial.rottentomatoes.com/guide/best-movies-of-all-time/">Rotten Tomatoes</a> and <a href="https://www.imdb.com/chart/top/">IMDb</a> respectively using <a href="https://github.com/tidyverse/rvest/">rvest</a>.
author: "Sukalpo Saha"
date: today
format:
  html:
    theme: cosmo
    smooth-scroll: true
    code-fold: true
    code-tools:
      source: true
      toggle: true
      caption: none
knitr:
  opts_chunk:
    echo: false
    collapse: true
    comment: "#>"
    message: false
    warning: false
title-block-style: default
title-block-banner: true
editor: visual
---

```{css}
.cell-output-display:not(.no-overflow-x), .knitsql-table:not(.no-overflow-x) {
    overflow-x: auto;
    width: max-content;
    height: auto;
}

#title-block-header.quarto-title-block.default .quarto-title .title {
    color: #eb2727;
    font-weight: bold;
}

p.subtitle {
    color: #20794d;
    font-weight: bold;
}

#title-block-header.quarto-title-block.default .quarto-title-meta {
    color: #eb2727;
}

#title-block-header > div.quarto-title-banner.page-columns.page-full > div > div > div > a {
    color: coral !important;
}

code {
   color: #597 !important;
}
```


```{r}
## Load required packages
library(dplyr)
library(tidyr)
library(stringr)
library(purrr)
library(rvest)
library(gt)
library(gtExtras)
```

```{r}
## Create functions to scrape movie related information from Rotten Tomatoes
## and IMDb
### Extract Movie Posters
get_img_src <- function(pg) {
  pg |>
    html_elements("a > div > img") |>
    html_attrs() |>
    keep(\(x) x[["class"]] == "article_poster") |>
    map_chr(\(x) x[["src"]])
}
### Extract movie info from Rotten Tomatoes
get_movie_info <- function(pg, tag) {
  pg |>
    html_elements(tag) |>
    html_text2()
}
### IMDb movie ratings
get_imdb_movies <- function(pg) {
  name <- pg |>
    html_elements(".ipc-title__text") |>
    html_text2()

  ratings <- pg |>
    html_elements(".ipc-metadata-list-summary-item__tc") |>
    html_elements("div") |>
    html_text2()

  ratings <-
    map_chr(
      seq(4, by = 4, length.out = length(ratings) / 4), \(x) ratings[x]
    ) |>
    str_sub(1, 3) |>
    as.numeric()

  data.frame(name = name[3:252], imdb = ratings) |>
    mutate(name = str_squish(str_remove(name, paste0(row_number(), ". "))))
}
```

```{r}
## Read Webpages and create the data to display
rot <-
  "https://editorial.rottentomatoes.com/guide/best-movies-of-all-time/"
imdb <- "https://www.imdb.com/chart/top/"

html <- map(c(rot, imdb), read_html) |>
  set_names("tomato", "imdb")

### clean scraped data
rank <- 1:50
logo <- get_img_src(html$tomato)
movie <- get_movie_info(html$tomato, "div.article_movie_title > div > h2 > a")
year <- get_movie_info(html$tomato, "span.subtle.start-year")
score <- get_movie_info(html$tomato, "span.tMeterScore")
director <- get_movie_info(html$tomato, "div.info.director")
cast <- get_movie_info(html$tomato, "div.info.cast")
cc <- get_movie_info(html$tomato, "div.info.critics-consensus")

rt <- bind_cols(set_names(
  list(rank, logo, movie, year, score, director, cast, cc),
  c(
    "rank",
    "logo",
    "name",
    "year",
    "score",
    "director",
    "cast",
    "consensus"
  )
)) |>
  left_join(get_imdb_movies(html$imdb), by = "name") |>
  unite("name", c("name", "year"), sep = " ") |>
  mutate(
    name = paste0("<h3>", name, "</h3>"),
    director = str_replace(director, "Directed By: ", "<b>Directed By:</b><br>"),
    cast = str_replace(cast, "Starring: ", "<b>Starring:</b><br>"),
    consensus = str_replace(
      consensus, "Critics Consensus: ", "<b>Critics Consensus:</b><br>"
    ),
    score = paste0("![", score, "](apple.png 'Critic Score: Movieâ€™s Tomatometer Rating with assistance from its Audience Score to represent sentiment from both sides.\nOther factors considered in calculating this score are number of critics reviews, number of audience score votes, and its year of release.')<br>", score, "</br>"),
    imdb = if_else(
      !is.na(imdb), paste0("![star](star.svg) <b>", imdb, "</b>"), "Outside Top 250"
    ),
    imdb1 = paste0("![imdb](imdb.png)")
  )

```

```{r}
## Display the table with `{gt}`
rt |>
  gt(groupname_col = "rank") |>
  text_transform(
    locations = cells_row_groups(),
    fn = \(x) paste0("#", x)
  ) |>
  text_transform(
    locations = cells_body(columns = logo),
    fn = \(x) web_image(url = x, height = 300)
  ) |>
  cols_align(align = "center", columns = imdb) |>
  fmt_markdown(columns = c(name:consensus, contains("imdb"))) |>
  cols_merge(
    columns = name:consensus,
    pattern = "{1}<br>{2}<br>{5}<br>{4}<br>{3}"
  ) |>
  cols_move("imdb", after = "imdb1") |>
  cols_width(
    name ~ px(500),
    logo ~ px(225),
    imdb ~ px(75),
    everything() ~ px(55)
  ) |>
  cols_label_with(
    fn = \(x) ""
  ) |>
   tab_header(
     title = html(
       str_replace(
         add_text_img(
           text = "Best Movies of All Time (Top 50)",
           url = "rtom.png",
           height = 100,
           left = TRUE
         ),
         pattern = "vertical-align: top",
         "vertical-align: middle"
       )
     )
  ) |>
  tab_style(
    style = cell_text(align = "right", weight = "bold"),
    locations = cells_row_groups()
  ) |>
  tab_style(
    style = cell_text(
      color = "#ceed2a",
      font = google_font("Cabin"),
      weight = 600,
      v_align = "middle"
    ),
    locations = cells_title()
  ) |>
  tab_style(
    style = cell_text(font = google_font("Poppins")),
    locations = cells_body()
  ) |>
  tab_style(
    style = cell_text(
      color = "#20794d",
      font = google_font("Cabin"),
      v_align = "bottom"
    ),
    locations = cells_row_groups()
  ) |>
  tab_style(
    style = cell_fill(color = "#eb2727"),
    locations = cells_title()
  ) |>
  tab_style(
    style = cell_text(align = "center", v_align = "middle"),
    locations = cells_column_labels()
  ) |>
  tab_style(
    style = cell_text(align = "right"),
    locations = cells_body(columns = imdb1)
  ) |>
  tab_style(
    style = cell_fill(color = "#f8f9fa"),
    locations = cells_body(rows = seq(1, 50, 2))
  ) |>
  tab_style(
    style = cell_fill(color = "#f8f9fa"),
    locations = cells_row_groups(groups = seq(1, 50, 2))
  ) |>
  tab_options(
    data_row.padding = px(20),
    table.font.size = 15,
    row_group.font.size = 24,
    row_group.border.bottom.style = "hidden",
    heading.title.font.size = 24,
    heading.border.bottom.color = "#000",
    heading.border.bottom.width = px(3),
    column_labels.border.bottom.style = "hidden"
  ) |>
  opt_css(
    css = "
    .gt_title {
       padding-bottom: 0px !important;
    }
    .gt_group_heading {
       padding-top: 4px !important;
       padding-bottom: 0px !important;
    }
    .gt_row {
      border-bottom-color: #d3d3d3 !important;
      border-bottom-width: 2px !important;
      border-bottom-style: solid !important;
    }
    .gt_col_headings {
      display: none !important;
    }
    img[alt=star] {
      width: 25px;
      vertical-align: -0.2em;
    }
    img[alt=imdb] {
      width: 50px;
    }
    "
  )

```
