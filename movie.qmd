---
title: "Ha`rvest` Rotten Tomatoes"
subtitle: "Top 50 Movies of all time along with Critic Score and IMDb (Internet Movie Database) Ratings"
description: Movie related information was scraped from <a href="https://editorial.rottentomatoes.com/guide/best-movies-of-all-time/">Rotten Tomatoes</a> and <a href="https://www.imdb.com/chart/top/">IMDb</a> respectively using <a href="https://github.com/tidyverse/rvest/">rvest</a>.
author: "Sukalpo Saha"
date: today
format:
  html:
    theme: slate
    smooth-scroll: true
    code-fold: true
    code-tools:
      source: true
      toggle: true
      caption: none
knitr:
  opts_chunk:
    echo: false
    collapse: true
    comment: "#>"
    message: false
    warning: false
title-block-style: default
title-block-banner: true
editor: visual
---

```{css}
.cell-output-display:not(.no-overflow-x), .knitsql-table:not(.no-overflow-x) {
    overflow-x: auto;
    width: max-content;
    height: auto;
}

#title-block-header.quarto-title-block.default .quarto-title .title {
    color: tomato;
    font-weight: bold;
}

p.subtitle {
    color: #fdde55;
}

#title-block-header.quarto-title-block.default .quarto-title-meta {
    color: tomato;
}

#title-block-header > div.quarto-title-banner.page-columns.page-full > div > div > div > a {
    color: orange !important;
}

#quarto-code-tools-source > i {
    color: tomato !important;
}

code {
   color: #597 !important;
}
```


```{r}
## Load required packages
library(dplyr)
library(tidyr)
library(stringr)
library(purrr)
library(rvest)
library(gt)
library(gtExtras)
```

```{r}
## Create functions to scrape movie related information from Rotten Tomatoes
## and IMDb
### Movie Poster urls
get_img_src <- function(pg) {
  pg |>
    html_elements("a > div > img") |>
    html_attrs() |>
    keep(\(x) x[["class"]] == "article_poster") |>
    map_chr(\(x) x[["src"]])
}
### Director Names
get_dir_names <- function(pg) {
  pg |>
    html_elements("div.info.director") |>
    html_text2() |>
    str_remove(pattern = "Directed By: ") |>
    str_replace_all(" ", "_")
}
### Movie Cast
get_cast <- function(pg) {
  pg |>
    html_elements("div.info.cast") |>
    html_text2() |>
    str_remove(pattern = "Starring: ")
}
### IMDb movie ratings
get_imdb_movies <- function(pg) {
  name <- pg |>
    html_elements(".ipc-title__text") |>
    html_text2()

  ratings <- pg |>
    html_elements(".ipc-metadata-list-summary-item__tc") |>
    html_elements("div") |>
    html_text2()

  ratings <-
    map_chr(
      seq(4, by = 4, length.out = length(ratings) / 4), \(x) ratings[x]
    ) |>
    str_sub(1, 3) |>
    as.numeric()

  data.frame(name = name[3:252], imdb = ratings) |>
    mutate(name = str_squish(str_remove(name, paste0(row_number(), ". "))))
}
```

```{r}
## Read Webpages and create the data to display
rot <-
  "https://editorial.rottentomatoes.com/guide/best-movies-of-all-time/"
imdb <- "https://www.imdb.com/chart/top/"

html <- map(c(rot, imdb), read_html) |>
  set_names("tomato", "imdb")

### clean scraped data
rt <- html$tomato |>
  html_elements("table") |>
  html_table() |>
  bind_rows() |>
  slice_head(n = 50) |>
  mutate(across(everything(), \(x) str_squish(x))) |>
  select("rank" = "X1", "X2") |>
  separate_wider_delim(X2, delim = "% ", names = c("score", "name")) |>
  separate_wider_delim(name, delim = " (", names = c("name", "year")) |>
  mutate(year = str_extract(year, "\\d+")) |>
  mutate(across(c(1, 2, 4), as.numeric)) |>
  ### add IMDb top 250 to Rotten Tomatoes Top 100
  left_join(get_imdb_movies(html$imdb), by = "name")

### add rotten tomatoes movie posters and movie details
rt <- rt |>
  mutate(logo = get_img_src(html$tomato), .after = "rank") |>
  mutate(
    dir = str_replace_all(get_dir_names(html$tomato), "_", " "),
    cast = get_cast(html$tomato),
    .after = "name"
  )
```

```{r}
## Display the table with `{gt}`
rt |>
  gt(groupname_col = "rank") |>
  text_transform(
    locations = cells_body(columns = logo),
    fn = \(x) web_image(url = x, height = 175)
  ) |>
  fmt_pct_extra(columns = score) |>
  text_transform(
    locations = cells_body(columns = imdb),
    fn = \(x) {
      map(suppressWarnings(as.numeric(x)), \(rating) {
        if (is.na(rating)) {
          return(html("Outside IMDb Top 250"))
        }
        rounded_rating <- floor(rating + 0.5)
        label <- sprintf("%s out of %s", rating, 10)
        stars <- map(seq_len(10), \(i) {
          fontawesome::fa(
              "star",
              fill = "orange",
              width = "14px",
              height = "14px",
              title = label,
              prefer_type = if_else(i <= rounded_rating, "solid", "regular")
            )
        })
        htmltools::div(
          title = label,
          "aria-label" = label,
          role = "img",
          stars,
          style = "padding:0px"
        ) |>
          as.character() |>
          html()
      })
    }
  ) |>
  cols_align(align = "left", columns = imdb) |>
  cols_width(
    rank ~ px(25),
    c("logo", "name", "dir", "cast") ~ px(180),
    imdb ~ px(200),
    everything() ~ px(100)
  ) |>
  cols_move(
    "name",
    after = "logo"
  ) |>
  cols_move_to_end(c("score", "imdb")) |>
  cols_label(
    "rank" ~ "",
    "logo" ~ "",
    "name" ~ "Movie",
    "score" ~ with_tooltip(
      html(local_image(filename = "apple.png", height = 22)),
      "Critic Score"
    ),
    "dir" ~ "Directed By",
    "cast" ~ "Starring",
    "year" ~ "Year",
    "imdb" ~ with_tooltip(
      html(local_image(filename = "imdb.png", height = 20)),
      "IMDb Ratings"
    )
  ) |>
  tab_style(
    style = cell_text(
      align = "center",
      font = google_font("Chivo"),
      color = "#fdde55",
      weight = "bold"
    ),
    locations = cells_column_labels()
  ) |>
  tab_style(
    style = cell_text(align = "right"),
    locations = cells_body(columns = rank)
  ) |>
  tab_style(
    style = cell_text(align = "center"),
    locations = cells_body(columns = -rank)
  ) |>
  tab_style(
    style = cell_fill(color = "#272b30"),
    locations = cells_body()
  ) |>
  tab_style(
    style = cell_fill(color = "#272b30"),
    locations = cells_row_groups()
  ) |>
  tab_style(
    style = cell_text(color = "tomato", font = google_font("Poppins")),
    locations = cells_body(columns = - c("score", "imdb"))
  ) |>
  tab_style(
    style = cell_text(color = "#65b741", font = google_font("Poppins")),
    locations = cells_body(columns = score)
  ) |>
  tab_style(
    style = cell_text(color = "orange", font = google_font("Poppins")),
    locations = cells_body(columns = imdb)
  ) |>
  tab_style(
    style = cell_text(color = "#fdde55", font = google_font("Poppins")),
    locations = cells_row_groups()
  ) |>
  tab_style(
    style = cell_fill(color = "#a91d3a"),
    locations = cells_column_labels()
  ) |>
  tab_style(
    style = cell_borders(color = "#a91d3a", sides = "bottom", weight = px(2)),
    locations = cells_column_labels()
  ) |>
  opt_table_outline(color = "#597e52") |>
  tab_options(
    data_row.padding = px(10),
    table.font.size = 15,
    row_group.font.size = 18,
    row_group.border.bottom.style = "hidden",
    row_group.border.top.color = "#597e52",
    column_labels.font.size = 20
  ) |>
  opt_css(
    css = "
    .gt_table {
      width: max-content !important;
    }
    abbr > img {
       vertical-align: -0.45em !important;
    }
    abbr[title], abbr[data-bs-original-title] {
      cursor: pointer;
    }
    tr > td > img {
       border-radius: 8px !important;
    }
    "
  )

```
